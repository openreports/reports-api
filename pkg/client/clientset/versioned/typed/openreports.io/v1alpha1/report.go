// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	openreportsiov1alpha1 "github.com/openreports/reports-api/apis/openreports.io/v1alpha1"
	applyconfigurationopenreportsiov1alpha1 "github.com/openreports/reports-api/pkg/client/applyconfiguration/openreports.io/v1alpha1"
	scheme "github.com/openreports/reports-api/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ReportsGetter has a method to return a ReportInterface.
// A group's client should implement this interface.
type ReportsGetter interface {
	Reports(namespace string) ReportInterface
}

// ReportInterface has methods to work with Report resources.
type ReportInterface interface {
	Create(ctx context.Context, report *openreportsiov1alpha1.Report, opts v1.CreateOptions) (*openreportsiov1alpha1.Report, error)
	Update(ctx context.Context, report *openreportsiov1alpha1.Report, opts v1.UpdateOptions) (*openreportsiov1alpha1.Report, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*openreportsiov1alpha1.Report, error)
	List(ctx context.Context, opts v1.ListOptions) (*openreportsiov1alpha1.ReportList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *openreportsiov1alpha1.Report, err error)
	Apply(ctx context.Context, report *applyconfigurationopenreportsiov1alpha1.ReportApplyConfiguration, opts v1.ApplyOptions) (result *openreportsiov1alpha1.Report, err error)
	ReportExpansion
}

// reports implements ReportInterface
type reports struct {
	*gentype.ClientWithListAndApply[*openreportsiov1alpha1.Report, *openreportsiov1alpha1.ReportList, *applyconfigurationopenreportsiov1alpha1.ReportApplyConfiguration]
}

// newReports returns a Reports
func newReports(c *OpenreportsV1alpha1Client, namespace string) *reports {
	return &reports{
		gentype.NewClientWithListAndApply[*openreportsiov1alpha1.Report, *openreportsiov1alpha1.ReportList, *applyconfigurationopenreportsiov1alpha1.ReportApplyConfiguration](
			"reports",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *openreportsiov1alpha1.Report { return &openreportsiov1alpha1.Report{} },
			func() *openreportsiov1alpha1.ReportList { return &openreportsiov1alpha1.ReportList{} },
		),
	}
}
