// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/openreports/reports-api/apis/openreports.io/v1alpha1"
	openreportsiov1alpha1 "github.com/openreports/reports-api/pkg/client/applyconfiguration/openreports.io/v1alpha1"
	typedopenreportsiov1alpha1 "github.com/openreports/reports-api/pkg/client/clientset/versioned/typed/openreports.io/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeClusterReports implements ClusterReportInterface
type fakeClusterReports struct {
	*gentype.FakeClientWithListAndApply[*v1alpha1.ClusterReport, *v1alpha1.ClusterReportList, *openreportsiov1alpha1.ClusterReportApplyConfiguration]
	Fake *FakeOpenreportsV1alpha1
}

func newFakeClusterReports(fake *FakeOpenreportsV1alpha1) typedopenreportsiov1alpha1.ClusterReportInterface {
	return &fakeClusterReports{
		gentype.NewFakeClientWithListAndApply[*v1alpha1.ClusterReport, *v1alpha1.ClusterReportList, *openreportsiov1alpha1.ClusterReportApplyConfiguration](
			fake.Fake,
			"",
			v1alpha1.SchemeGroupVersion.WithResource("clusterreports"),
			v1alpha1.SchemeGroupVersion.WithKind("ClusterReport"),
			func() *v1alpha1.ClusterReport { return &v1alpha1.ClusterReport{} },
			func() *v1alpha1.ClusterReportList { return &v1alpha1.ClusterReportList{} },
			func(dst, src *v1alpha1.ClusterReportList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.ClusterReportList) []*v1alpha1.ClusterReport {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.ClusterReportList, items []*v1alpha1.ClusterReport) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
