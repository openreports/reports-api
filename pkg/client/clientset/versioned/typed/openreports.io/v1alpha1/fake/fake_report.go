// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/openreports/reports-api/apis/openreports.io/v1alpha1"
	openreportsiov1alpha1 "github.com/openreports/reports-api/pkg/client/applyconfiguration/openreports.io/v1alpha1"
	typedopenreportsiov1alpha1 "github.com/openreports/reports-api/pkg/client/clientset/versioned/typed/openreports.io/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeReports implements ReportInterface
type fakeReports struct {
	*gentype.FakeClientWithListAndApply[*v1alpha1.Report, *v1alpha1.ReportList, *openreportsiov1alpha1.ReportApplyConfiguration]
	Fake *FakeOpenreportsV1alpha1
}

func newFakeReports(fake *FakeOpenreportsV1alpha1, namespace string) typedopenreportsiov1alpha1.ReportInterface {
	return &fakeReports{
		gentype.NewFakeClientWithListAndApply[*v1alpha1.Report, *v1alpha1.ReportList, *openreportsiov1alpha1.ReportApplyConfiguration](
			fake.Fake,
			namespace,
			v1alpha1.SchemeGroupVersion.WithResource("reports"),
			v1alpha1.SchemeGroupVersion.WithKind("Report"),
			func() *v1alpha1.Report { return &v1alpha1.Report{} },
			func() *v1alpha1.ReportList { return &v1alpha1.ReportList{} },
			func(dst, src *v1alpha1.ReportList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.ReportList) []*v1alpha1.Report { return gentype.ToPointerSlice(list.Items) },
			func(list *v1alpha1.ReportList, items []*v1alpha1.Report) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
