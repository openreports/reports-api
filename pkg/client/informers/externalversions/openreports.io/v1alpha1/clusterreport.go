// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	apisopenreportsiov1alpha1 "github.com/openreports/reports-api/apis/openreports.io/v1alpha1"
	versioned "github.com/openreports/reports-api/pkg/client/clientset/versioned"
	internalinterfaces "github.com/openreports/reports-api/pkg/client/informers/externalversions/internalinterfaces"
	openreportsiov1alpha1 "github.com/openreports/reports-api/pkg/client/listers/openreports.io/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// ClusterReportInformer provides access to a shared informer and lister for
// ClusterReports.
type ClusterReportInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() openreportsiov1alpha1.ClusterReportLister
}

type clusterReportInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewClusterReportInformer constructs a new informer for ClusterReport type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterReportInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredClusterReportInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClusterReportInformer constructs a new informer for ClusterReport type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterReportInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OpenreportsV1alpha1().ClusterReports().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OpenreportsV1alpha1().ClusterReports().Watch(context.Background(), options)
			},
			ListWithContextFunc: func(ctx context.Context, options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OpenreportsV1alpha1().ClusterReports().List(ctx, options)
			},
			WatchFuncWithContext: func(ctx context.Context, options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OpenreportsV1alpha1().ClusterReports().Watch(ctx, options)
			},
		},
		&apisopenreportsiov1alpha1.ClusterReport{},
		resyncPeriod,
		indexers,
	)
}

func (f *clusterReportInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredClusterReportInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *clusterReportInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apisopenreportsiov1alpha1.ClusterReport{}, f.defaultInformer)
}

func (f *clusterReportInformer) Lister() openreportsiov1alpha1.ClusterReportLister {
	return openreportsiov1alpha1.NewClusterReportLister(f.Informer().GetIndexer())
}
