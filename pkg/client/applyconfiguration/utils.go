// Code generated by controller-gen. DO NOT EDIT.

package applyconfiguration

import (
	v1alpha1 "github.com/openreports/reports-api/apis/openreports.io/v1alpha1"
	internal "github.com/openreports/reports-api/pkg/client/applyconfiguration/internal"
	openreportsiov1alpha1 "github.com/openreports/reports-api/pkg/client/applyconfiguration/openreports.io/v1alpha1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	managedfields "k8s.io/apimachinery/pkg/util/managedfields"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=openreports.io, Version=v1alpha1
	case v1alpha1.SchemeGroupVersion.WithKind("ClusterReport"):
		return &openreportsiov1alpha1.ClusterReportApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Limits"):
		return &openreportsiov1alpha1.LimitsApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Report"):
		return &openreportsiov1alpha1.ReportApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ReportConfiguration"):
		return &openreportsiov1alpha1.ReportConfigurationApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ReportResult"):
		return &openreportsiov1alpha1.ReportResultApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ReportSummary"):
		return &openreportsiov1alpha1.ReportSummaryApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) managedfields.TypeConverter {
	return managedfields.NewSchemeTypeConverter(scheme, internal.Parser())
}
